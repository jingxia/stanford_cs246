package edu.stanford.cs246.assocrules;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

import org.apache.commons.lang.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import edu.stanford.cs246.assocrules.AssocRules;
import edu.stanford.cs246.assocrules.AssocRules.Map1;
import edu.stanford.cs246.assocrules.AssocRules.Reduce1;
 

public class AssocRules {
	
    public static class Map1 extends Mapper<LongWritable, Text, Text, IntWritable> {
    	private final static IntWritable ONE = new IntWritable(1);	 
    	private Text pair_key = new Text();
        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        	System.out.println(value);
            String line = value.toString();
            String[] products = line.split(" ");
            for (int i = 0; i < products.length - 1; i++) {
            	for (int j = i+1; j < products.length; j++) {
            		String[] pair = {products[i], products[j]};
            		Arrays.sort(pair);
            		pair_key.set(pair[0] + " " + pair[1]);
            		System.out.println(pair_key);
            		context.write(pair_key, ONE);
            	}
            }
          
        }
    } 
 
    public static class Reduce1 extends Reducer<Text, IntWritable, IntWritable, Text> {
        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
        	int sum = 0;
            for (IntWritable val : values) {
               sum += val.get();
            }
            if (sum >= 100) {
            	context.write(key, new IntWritable(sum));
            }
        }
    }
 
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        final String OUTPUT_PATH = "intermediate_output";
        
        Job job = new Job(conf, "job1");
        job.setJarByClass(AssocRules.class);
        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(Text.class);
 
        job.setMapperClass(Map1.class);
        job.setReducerClass(Reduce1.class);
 
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
 
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PATH));
 
        job.waitForCompletion(true);
    }
}