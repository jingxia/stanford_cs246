package edu.stanford.cs246.assocrules;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.File;

import org.apache.commons.lang.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import edu.stanford.cs246.assocrules.AssocRules;

import java.util.*;


public class AssocRules {
	public static HashMap<String, Integer> freq_prod = new HashMap<String, Integer>();
	public static HashMap<String, Integer> freq_pair = new HashMap<String, Integer>();
	
	public static class Map0 extends
			Mapper<LongWritable, Text, Text, IntWritable> {
		private final static IntWritable ONE = new IntWritable(1);
		private Text prod_key = new Text();
		public void map(LongWritable key, Text value, Context context)
				throws IOException, InterruptedException {
			//System.out.println(value);
			String line = value.toString();
			String[] products = line.split(" ");
			for (int i = 0; i < products.length - 1; i++) {
				prod_key.set(products[i]);
				context.write(prod_key, ONE);				
			}
		}
	}
	
 
    public static class Reduce0 extends Reducer<Text, IntWritable, Text, IntWritable> {
        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
        	int sum = 0;
            for (IntWritable val : values) {
               sum += val.get();
            }
            if (sum >= 100) {
            	//System.out.println(key+" "+sum+"\t");
            	freq_prod.put(key.toString(), sum);
            }
        }
    }
    
	public static class Map1 extends
			Mapper<LongWritable, Text, Text, IntWritable> {
		private final static IntWritable ONE = new IntWritable(1);
		private Text pair_key = new Text();

		public void map(LongWritable key, Text value, Context context)
				throws IOException, InterruptedException {
			// System.out.println(value);
			String line = value.toString();
			String[] products = line.split(" ");
			int i = 0;
			int j = 0;
			while (i < products.length - 1 && freq_prod.containsKey(products[i])) {
				j = i + 1;
				while (j < products.length && freq_prod.containsKey(products[j])) {
					String[] pair = { products[i], products[j] };
					Arrays.sort(pair);
					pair_key.set(pair[0] + " " + pair[1]);
					// System.out.println(pair_key);
					context.write(pair_key, ONE);
					j = j+1;
				}
				i = i+1;
			}

		}
	}

	public static class Reduce1 extends
			Reducer<Text, IntWritable, Text, IntWritable> {
		public void reduce(Text key, Iterable<IntWritable> values,
				Context context) throws IOException, InterruptedException {
			int sum = 0;
			for (IntWritable val : values) {
				sum += val.get();
			}
			if (sum >= 100) {
				freq_pair.put(key.toString(), sum);
			}
		}
	}
    
	public static class Map2 extends
			Mapper<LongWritable, Text, Text, IntWritable> {
		private final static IntWritable ONE = new IntWritable(1);
		private Text pair_key = new Text();

		public void map(LongWritable key, Text value, Context context)
				throws IOException, InterruptedException {
			// System.out.println(value);
			String line = value.toString();
			String[] products = line.split(" ");
			for (int i = 0; i < products.length - 1; i++) {
				for (int j = i + 1; j < products.length; j++) {
					String[] pair = { products[i], products[j] };
					Arrays.sort(pair);
					pair_key.set(pair[0] + " " + pair[1]);
					// System.out.println(pair_key);
					context.write(pair_key, ONE);
				}
			}

		}
	}

	public static class Reduce2 extends
			Reducer<Text, IntWritable, Text, IntWritable> {
		public void reduce(Text key, Iterable<IntWritable> values,
				Context context) throws IOException, InterruptedException {
			int sum = 0;
			for (IntWritable val : values) {
				sum += val.get();
			}
			if (sum >= 100) {
				context.write(key, new IntWritable(sum));
			}
		}
	}
 
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        final String OUTPUT_PATH = "intermediate_output";
        /* 
         * job 0: frequent product
         */
        Job job = new Job(conf, "job0");
        job.setJarByClass(AssocRules.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
 
        job.setMapperClass(Map0.class);
        job.setReducerClass(Reduce0.class);
 
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
 
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PATH));
 
        job.waitForCompletion(true);
        
        
        /* 
         * job 1: frequent pair
         */
        Job job1 = new Job(conf, "job1");
        job1.setJarByClass(AssocRules.class);
        job1.setOutputKeyClass(Text.class);
        job1.setOutputValueClass(IntWritable.class);
 
        job1.setMapperClass(Map1.class);
        job1.setReducerClass(Reduce1.class);
 
        job1.setInputFormatClass(TextInputFormat.class);
        job1.setOutputFormatClass(TextOutputFormat.class);
 
        FileInputFormat.addInputPath(job1, new Path(args[0]));
        FileOutputFormat.setOutputPath(job1, new Path(args[1]));
 
        job1.waitForCompletion(true);
//        System.out.println(freq_prod.keySet());
//        System.out.println(freq_pair.keySet());
        
        // top 5 pairs
        File file = new File("output/itemset_2.txt");
        if (!file.exists()) {
			file.createNewFile();
		}
        FileWriter fw = new FileWriter(file.getAbsoluteFile());
		BufferedWriter bw = new BufferedWriter(fw);
		HashMap<String, Double> rules_pair = new HashMap<String, Double>();
        String[] prods = new String[2];
        for (String key : freq_pair.keySet()){
        	prods = key.split(" ");
        	rules_pair.put(key, (double) freq_pair.get(key)/freq_prod.get(prods[1]));
        	rules_pair.put(prods[1]+" "+prods[0], (double) freq_pair.get(key)/freq_prod.get(prods[0]));
        	bw.write(key+": "+rules_pair.get(key)+"\n");
        	bw.write(prods[1]+" "+prods[0]+ ": " + rules_pair.get(prods[1]+" "+prods[0]+"\n"));
        }
        System.out.print(freq_prod.get("DAI11223") + "\n");
        System.out.print(freq_prod.get("DAI11778") + "\n");
		bw.close();
        LinkedHashMap rules_pair_desc = sortHashMapByValuesD(rules_pair);
        Set set = rules_pair_desc.entrySet();
        // Get an iterator
        Iterator i = set.iterator();
        // Display elements
        for (int kk = 0 ; kk < 5; kk++) {
           Map.Entry me = (Map.Entry)i.next();
           System.out.print(me.getKey() + ": ");
           System.out.println(me.getValue());
        }
    }
    
	public static LinkedHashMap sortHashMapByValuesD(HashMap passedMap) {
		List mapKeys = new ArrayList(passedMap.keySet());
		List mapValues = new ArrayList(passedMap.values());
		Collections.sort(mapValues, Collections.reverseOrder());
//		Collections.sort(mapKeys, Collections.reverseOrder());

		LinkedHashMap sortedMap = new LinkedHashMap();

		Iterator valueIt = mapValues.iterator();
		while (valueIt.hasNext()) {
			Object val = valueIt.next();
			Iterator keyIt = mapKeys.iterator();

			while (keyIt.hasNext()) {
				Object key = keyIt.next();
				String comp1 = passedMap.get(key).toString();
				String comp2 = val.toString();

				if (comp1.equals(comp2)) {
					passedMap.remove(key);
					mapKeys.remove(key);
					sortedMap.put((String) key, val);
					break;
				}

			}

		}
		return sortedMap;
	}
}





